tidyr::drop_na()
data1 = filter(data, N >=5 & P.R. >= 1e-150 & P.R. != 0)%>%
mutate(P.R. = P.R.^(1/9)) %>%
#filter(P != 0) %>%
tidyr::drop_na()
# find location for the DRD4 gene
data.drd4 = filter(data1, CHR == 11, 637269 <= BP & BP <= 640706)
# find DRD2 gene
data.drd2 = filter(data1, CHR == 11, 113280327 <= BP & BP <= 113346120)
drd2
data.drd2
manhattan(filter(data1, CHR==11),annotatePval = 1e-8, ylim = c(0, 10),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
# path = "studyData/plink/plink.meta"
path = "studyData/ncr_plink/plink_5.meta"
data = tibble(read.table(path, header = T)) %>%
filter(P.R. != 0) %>%
tidyr::drop_na()
data1 = filter(data, N >=5 & P.R. >= 1e-150 & P.R. != 0)%>%
mutate(P.R. = P.R.^(1/9)) %>%
#filter(P != 0) %>%
tidyr::drop_na()
# find location for the DRD4 gene
data.drd4 = filter(data1, CHR == 11, 637269 <= BP & BP <= 640706)
# find DRD2 gene
data.drd2 = filter(data1, CHR == 11, 113280327 <= BP & BP <= 113346120)
manhattan(data1,annotatePval = 1e-8, ylim = c(0, 10),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
manhattan(filter(data1, CHR==11),annotatePval = 1e-8, ylim = c(0, 10),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
# path = "studyData/plink/plink.meta"
path = "studyData/ncr_plink/plink_6.meta"
data = tibble(read.table(path, header = T)) %>%
filter(P.R. != 0) %>%
tidyr::drop_na()
data1 = filter(data, N >=5 & P.R. >= 1e-150 & P.R. != 0)%>%
mutate(P.R. = P.R.^(1/9)) %>%
#filter(P != 0) %>%
tidyr::drop_na()
# find location for the DRD4 gene
data.drd4 = filter(data1, CHR == 11, 637269 <= BP & BP <= 640706)
# find DRD2 gene
data.drd2 = filter(data1, CHR == 11, 113280327 <= BP & BP <= 113346120)
manhattan(data1,annotatePval = 1e-8, ylim = c(0, 10),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
# path = "studyData/plink/plink.meta"
path = "studyData/ncr_plink/plink_7.meta"
data = tibble(read.table(path, header = T)) %>%
filter(P.R. != 0) %>%
tidyr::drop_na()
data1 = filter(data, N >=5 & P.R. >= 1e-150 & P.R. != 0)%>%
mutate(P.R. = P.R.^(1/9)) %>%
#filter(P != 0) %>%
tidyr::drop_na()
# find location for the DRD4 gene
data.drd4 = filter(data1, CHR == 11, 637269 <= BP & BP <= 640706)
# find DRD2 gene
data.drd2 = filter(data1, CHR == 11, 113280327 <= BP & BP <= 113346120)
?manhattan
path = "studyData/plink/plink.meta"
# path = "studyData/ncr_plink/plink_7.meta"
data = tibble(read.table(path, header = T)) %>%
filter(P.R. != 0) %>%
tidyr::drop_na()
data1 = filter(data, N >=5 & P.R. >= 1e-150 & P.R. != 0)%>%
mutate(P.R. = P.R.^(1/9)) %>%
#filter(P != 0) %>%
tidyr::drop_na()
# find location for the DRD4 gene
data.drd4 = filter(data1, CHR == 11, 637269 <= BP & BP <= 640706)
# find DRD2 gene
data.drd2 = filter(data1, CHR == 11, 113280327 <= BP & BP <= 113346120)
data1 = filter(data, N >=5 & P.R. >= 1e-150 & P.R. != 0)%>%
mutate(P.R. = P.R.^(1/8)) %>%
#filter(P != 0) %>%
tidyr::drop_na()
# find location for the DRD4 gene
data.drd4 = filter(data1, CHR == 11, 637269 <= BP & BP <= 640706)
# find DRD2 gene
data.drd2 = filter(data1, CHR == 11, 113280327 <= BP & BP <= 113346120)
data.drd4
manhattan(data1,annotatePval = 1e-8, ylim = c(0, 10),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
manhattan(filter(data1, CHR==11),annotatePval = 1e-8, ylim = c(0, 10),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
manhattan(filter(data1, CHR==18),annotatePval = 1e-8, ylim = c(0, 10),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
manhattan(filter(data1, CHR==18),annotatePval = 1e-8, ylim = c(0, 10),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.", highlight = "rs149661977")
filter(data1, SNP == ""rs149661977"")
filter(data1, SNP == "rs149661977")
install.packages("humarray")
install.packages("Rtools")
library(Rtools)
BiocManager::install("Rtools")
install.packages("humarray")
BiocManager::install("humarray")
library(humarray)
library(dplyr)
library(stringr)
data1 = tibble(read.csv("studyData/files/PGC32099098_OD_cases_vs._opioid-exposed_controls_in_the_trans-ancestry_meta-analysis", sep = "\t"))
data2 = tibble(read.csv("studyData/files/PGC30482948_pgc_alcdep.discovery.aug2018_release.txt", sep = " "))
data2
data2.sm = data2[1:10,]
data2.sm %>%
mutate(SNP = strsplit(.,":")[1])
mutate(SNP = strsplit(SNP,":")[1])
data2.sm = data2[1:10,]
data2.sm %>%
mutate(SNP = strsplit(.,":")[1])
data2.sm %>%
mutate(SNP = strsplit(SNP,":")[1])
data2.sm %>%
mutate(SNP = strsplit(SNP,":")[1][1])
data2.sm %>%
mutate(SNP = unlist(strsplit(SNP,":"))[1])
data2.sm %>%
rowwise() %>%
mutate(SNP = unlist(strsplit(SNP,":"))[1])
data2 %>%
rowwise() %>%
mutate(SNP = unlist(strsplit(SNP,":"))[1])
formatted_data2 = data2 %>%
rowwise() %>%
mutate(SNP = unlist(strsplit(SNP,":"))[1]) %>%
dplyr::select(
SNP = SNP,
CHR = CHR,
BP = BP,
A1 = A1,
A2 = A2,
OR = Z,  # assuming that 'beta' represents the odds ratio here
SE = Weight,
P = P
)
formatted_data2
write.table(formatted_data2, "studyData/processed_files/PGC30482948_pgc_alcdep.discovery.aug2018_release_processed.txt", sep = "\t", row.names = FALSE, quote = FALSE)
View(data1)
data1 = tibble(read.csv("PGC30336701_AUDIT_UKB_2018_AJP.txt", sep = "\t"))
data1 = tibble(read.csv("PGC30336701_AUDIT_UKB_2018_AJP.txt", sep = " "))
data1 = tibble(read.csv("studyData/files/PGC30336701_AUDIT_UKB_2018_AJP.txt", sep = " "))
data2
data1
View(data1)
data1 %>%
filter(str_detect(.$rsid, "^rs"))
formatted_data1 = data1 %>%
filter(str_detect(.$rsid, "^rs")) %>%
dplyr::select(
SNP = rsid,
CHR = chr,
#BP = base_pair_location,
A1 = a_1,
A2 = a_0,
OR = beta_P,  # assuming that 'beta' represents the odds ratio here
SE = se_P,
P = p_P
)
# Save the formatted data
write.table(formatted_data1, "studyData/processed_files/PGC30336701_AUDIT_UKB_2018_AJP_processed.txt", sep = "\t", row.names = FALSE, quote = FALSE)
data2
data2 = tibble(read.csv("studyData/files/PGC32099098_OD_cases_vs._opioid-exposed_controls_in_the_trans-ancestry_meta-analysis", sep = "\t"))
data2
formatted_data2 = data2 %>%
#rowwise() %>%
#mutate(SNP = unlist(strsplit(SNP,":"))[1]) %>%
dplyr::select(
SNP = rsID,
#CHR = CHR,
#BP = BP,
A1 = Allele1,
A2 = Allele2,
OR = Zscore,  # assuming that 'beta' represents the odds ratio here
SE = Weight,
P = P.value
)
formatted_data2
write.table(formatted_data2, "studyData/processed_files/PGC30482948_pgc_alcdep.discovery.aug2018_release_processed.txt", sep = "\t", row.names = FALSE, quote = FALSE)
write.table(formatted_data2, "studyData/processed_files/PGC32099098_OD_cases_vs._opioid-exposed_controls_in_the_trans-ancestry_meta-analysis_processed.txt", sep = "\t", row.names = FALSE, quote = FALSE)
data1 = tibble(read.csv("studyData/files/PGC30482948_pgc_alcdep.discovery.aug2018_release.txt", sep = "\t"))
data1
data1 = tibble(read.csv("studyData/files/PGC30482948_pgc_alcdep.discovery.aug2018_release.txt", sep = " "))
data1
data2 = data1
data2 %>%
rowwise() %>%
mutate(SNP = unlist(strsplit(SNP,":"))[1])
formatted_data2 = data2 %>%
rowwise() %>%
mutate(SNP = unlist(strsplit(SNP,":"))[1]) %>%
dplyr::select(
SNP = SNP,
CHR = CHR,
BP = BP,
A1 = A1,
A2 = A2,
OR = Z,  # assuming that 'beta' represents the odds ratio here
SE = Weight,
P = P
)
write.table(formatted_data2, "studyData/processed_files/PGC30482948_pgc_alcdep.discovery.aug2018_release_processed.txt", sep = "\t", row.names = FALSE, quote = FALSE)
## Meta-analysis
library(dplyr)
library(qqman)
data = tibble(read.table("studyData/plink/plink.meta", header = T)) %>%
filter(P.R. != 0) %>%
tidyr::drop_na()
data1 = filter(data, N >=7 & P.R. >= 1e-150 & P.R. != 0)%>%
mutate(P.R. = P.R.^(1/8)) %>%
#filter(P != 0) %>%
tidyr::drop_na()
manhattan(data1,annotatePval = 1e-8, ylim = c(0, 10),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.", highlight = c("rs149661977") )
manhattan(filter(data1, CHR==11),annotatePval = 1e-8, ylim = c(0, 10),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.", highlight = c("rs149661977") )
data = tibble(read.table("studyData/plink_results/plink_smaller.meta", header = T)) %>%
filter(P.R. != 0) %>%
tidyr::drop_na()
data1 = filter(data, N >=4)%>%
mutate(P.R. = P.R.^(1)) %>%
#filter(P != 0) %>%
tidyr::drop_na()
manhattan(data1,annotatePval = 1e-8, ylim = c(0, 10),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.", highlight = c("rs149661977") )
manhattan(data1,annotatePval = 1e-8, genomewideline = -log10(0.001), suggestiveline = -log10(0.0001)  cex.axis = 0.9,
manhattan(data1,annotatePval = 1e-8, genomewideline = -log10(0.001), suggestiveline = -log10(0.0001),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.", highlight = c("rs149661977") )
?manhattan
manhattan(data1,annotatePval = 1e-8, genomewideline = -log10(0.001), suggestiveline = -log10(0.0001),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.", annotatePval = 0.0001 )
manhattan(data1,annotatePval = 1e-4, genomewideline = -log10(0.001), suggestiveline = -log10(0.0001),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R." )
manhattan(data1,annotatePval = 5e-4, genomewideline = -log10(0.001), suggestiveline = -log10(0.0001),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R." )
manhattan(data1,annotatePval = 7e-4, genomewideline = -log10(0.001), suggestiveline = -log10(0.0001),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R." )
manhattan(data1,annotatePval = 8e-4, genomewideline = -log10(0.001), suggestiveline = -log10(0.0001),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R." )
manhattan(filter(data1, CHR==6),annotatePval = 1e-4,  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.", highlight = c("rs149661977") )
manhattan(filter(data1, CHR==6),annotatePval = 1e-4,  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
manhattan(filter(data1, CHR==6),annotatePval = 1e-3,  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
manhattan(filter(data1, CHR==6),annotatePval = 1e-2,  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
manhattan(filter(data1, CHR==6),annotatePval = 2e-3,  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
manhattan(filter(data1, CHR==6),annotatePval = 3e-3,  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
manhattan(filter(data1, CHR==6),annotatePval = -log(3e-3),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
## Q-Q plot for the selected data
qq(data1$P.R.)
data.high = data1 %>%
filter(P.R. <= 5e-4)
## generate SNPdb query url
library(xml2)
library(httr)
library(stringr)
# query url, cannot query too many or will out of memory
response = GET(paste0("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=snp&id=", paste(data.high$SNP, collapse = ",")))
xml_content <- content(response, as = "text")
xml_content <- sub("<?xml[^>]*?>", "", xml_content)
xml_content <- paste("<root>", xml_content, "</root>")
xml_doc <- read_xml(xml_content)
gnames = c()
for (record in xml_children(xml_doc)){
gname <- xml_text(xml_find_first(record, ".//NAME"))
gnames = c(gnames, gname)
}
data.gname = data.high %>%
mutate(GENE = gnames) %>%
select(CHR, BP, SNP, A1, A2, N, P = P.R., OR = OR.R., GENE)
data.gname
View(data.gname)
data.high = data1 %>%
filter(P.R. <= 6e-4)
data.high = data1 %>%
filter(P.R. <= 8e-4)
## generate SNPdb query url
library(xml2)
library(httr)
library(stringr)
# query url, cannot query too many or will out of memory
response = GET(paste0("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=snp&id=", paste(data.high$SNP, collapse = ",")))
xml_content <- content(response, as = "text")
xml_content <- sub("<?xml[^>]*?>", "", xml_content)
xml_content <- paste("<root>", xml_content, "</root>")
xml_doc <- read_xml(xml_content)
gnames = c()
for (record in xml_children(xml_doc)){
gname <- xml_text(xml_find_first(record, ".//NAME"))
gnames = c(gnames, gname)
}
data.gname = data.high %>%
mutate(GENE = gnames) %>%
select(CHR, BP, SNP, A1, A2, N, P = P.R., OR = OR.R., GENE)
data.gname
View(data.gname)
unique(data.high$GENE)
unique(data.gname$GENE)
table(data.gname$GENE)
manhattan(data1,annotatePval = 8e-4, genomewideline = -log10(0.001), suggestiveline = -log10(0.0001),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R." )
manhattan(filter(data1, CHR==4),annotatePval = -log(3e-3),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
manhattan(filter(data1, CHR==4),annotatePval = -log(3e-2),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
manhattan(filter(data1, CHR==4),annotatePval = 3e-2,  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
filter(data1, CHR==4, BP < 1.1e8 & BP < 1.5e8, P.R. <= 1e-3)
filter(data1, CHR==4, BP < 1.1e8 & BP < 1.5e8, P.R. <= 1e-2)
filter(data1, CHR==4, BP < 1.1e8 & BP < 1.5e8, P.R. <= 1e-2.4)
filter(data1, CHR==4, BP < 1.1e8 & BP < 1.5e8, P.R. <= 1e-2)
filter(data1, CHR==4, BP < 1.1e8 & BP < 1.5e8 & P.R. <= 1e-2.4)
filter(data1, CHR==4, & P.R. <= 1e-2.4)
filter(data1, CHR==4, P.R. = 1e-5)
filter(data1, CHR==4, P.R. <= 1e-5)
filter(data1, CHR==4, P.R. <= 1e-3)
a = filter(data1, CHR==4, P.R. <= 1e-3)
data.high = a
# query url, cannot query too many or will out of memory
response = GET(paste0("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=snp&id=", paste(data.high$SNP, collapse = ",")))
xml_content <- content(response, as = "text")
xml_content <- sub("<?xml[^>]*?>", "", xml_content)
xml_content <- paste("<root>", xml_content, "</root>")
xml_doc <- read_xml(xml_content)
gnames = c()
for (record in xml_children(xml_doc)){
gname <- xml_text(xml_find_first(record, ".//NAME"))
gnames = c(gnames, gname)
}
data.gname = data.high %>%
mutate(GENE = gnames) %>%
select(CHR, BP, SNP, A1, A2, N, P = P.R., OR = OR.R., GENE)
data.gname
get.gname(filter(data1, CHR==4, P.R. <= 1e-3))
get.gname = function(a){
data.high = a
# query url, cannot query too many or will out of memory
response = GET(paste0("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=snp&id=", paste(data.high$SNP, collapse = ",")))
xml_content <- content(response, as = "text")
xml_content <- sub("<?xml[^>]*?>", "", xml_content)
xml_content <- paste("<root>", xml_content, "</root>")
xml_doc <- read_xml(xml_content)
gnames = c()
for (record in xml_children(xml_doc)){
gname <- xml_text(xml_find_first(record, ".//NAME"))
gnames = c(gnames, gname)
}
data.gname = data.high %>%
mutate(GENE = gnames) %>%
select(CHR, BP, SNP, A1, A2, N, P = P.R., OR = OR.R., GENE)
}
get.gname = function(a){
data.high = a
# query url, cannot query too many or will out of memory
response = GET(paste0("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=snp&id=", paste(data.high$SNP, collapse = ",")))
xml_content <- content(response, as = "text")
xml_content <- sub("<?xml[^>]*?>", "", xml_content)
xml_content <- paste("<root>", xml_content, "</root>")
xml_doc <- read_xml(xml_content)
gnames = c()
for (record in xml_children(xml_doc)){
gname <- xml_text(xml_find_first(record, ".//NAME"))
gnames = c(gnames, gname)
}
data.gname = data.high %>%
mutate(GENE = gnames) %>%
select(CHR, BP, SNP, A1, A2, N, P = P.R., OR = OR.R., GENE)
}
get.gname(filter(data1, CHR==4, P.R. <= 1e-3))
a = get.gname(filter(data1, CHR==4, P.R. <= 1e-3))
a
manhattan(data1,annotatePval = 8e-4, genomewideline = -log10(0.001), suggestiveline = -log10(0.0001),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R." )
manhattan(filter(data1, CHR==6),annotatePval = 3e-2,  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
a = data1 %>%
filter(P.R. <= 8e-3)
a = data1 %>%
filter(P.R. <= 1e-3)
a
a = data1 %>%
filter(P.R. <= 2e-3)
a
a = data1 %>%
filter(P.R. <= 8e-4)
a
a = data1 %>%
filter(P.R. <= 4e-4)
a
a = data1 %>%
filter(P.R. <= 4e-4) %>%
arrange(BP)
a
b = get.gname(a)
b
a = data1 %>%
filter(P.R. <= 4e-4, CHR == 6) %>%
arrange(BP)
a = data1 %>%
filter(P.R. <= 1e-3, CHR == 6) %>%
arrange(BP)
a
bget.gname(a)
b = get.gname(a)
b
manhattan(filter(data1, CHR==14),annotatePval = 3e-2,  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
manhattan(filter(data1, CHR==14),annotatePval = 3e-2,  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
a = data1 %>%
filter(P.R. <= 1e-3, CHR == 14) %>%
arrange(BP)
a
a = data1 %>%
filter(P.R. <= 5e-3, CHR == 14) %>%
arrange(BP)
a
b= get.gname(a)
b
print(b, n=50)
a = data1 %>%
filter(P.R. <= 5e-3) %>%
arrange(BP)
a = data1 %>%
filter(P.R. <= 5e-4) %>%
arrange(BP)
a = data1 %>%
filter(P.R. <= 1e-4) %>%
arrange(BP)
a = data1 %>%
filter(P.R. <= 4e-4) %>%
arrange(BP)
a = data1 %>%
filter(P.R. <= 5e-4) %>%
arrange(BP)
a
b = get.gname(a)
b
View(b)
a = data1 %>%
filter(P.R. <= 8e-4) %>%
arrange(BP)
## generate SNPdb query url
library(xml2)
b = get.gname(a)
b
View(b)
table(b$GENE)
b = tidyr::drop_na(get.gname(a))
setwd("~/GitHub/ADHD_AUD_review")
?cite
cite()
?citation
citation()
citation("dplyr")
citation(qqman)
citation("qqman")
## Meta-analysis
library(dplyr)
library(qqman)
?manhattan
## Meta-analysis
library(dplyr)
library(qqman)
data = tibble(read.table("studyData/plink_results/plink_smaller.meta", header = T)) %>%
filter(P.R. != 0) %>%
tidyr::drop_na()
data1 = filter(data, N >=4)%>%
mutate(P.R. = P.R.^(1)) %>%
#filter(P != 0) %>%
tidyr::drop_na()
manhattan(data1,annotatePval = 8e-4, genomewideline = -log10(0.001), suggestiveline = -log10(0.0001),  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R." )
manhattan(filter(data1, CHR==14),annotatePval = 3e-2,  cex.axis = 0.9,
col = c("blue4", "orange3"), p = "P.R.")
## Q-Q plot for the selected data
qq(data1$P.R.)
a = data1 %>%
filter(P.R. <= 8e-4) %>%
arrange(BP)
a
## generate SNPdb query url
library(xml2)
library(httr)
library(stringr)
get.gname = function(a){
data.high = a
# query url, cannot query too many or will out of memory
response = GET(paste0("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=snp&id=", paste(data.high$SNP, collapse = ",")))
xml_content <- content(response, as = "text")
xml_content <- sub("<?xml[^>]*?>", "", xml_content)
xml_content <- paste("<root>", xml_content, "</root>")
xml_doc <- read_xml(xml_content)
gnames = c()
for (record in xml_children(xml_doc)){
gname <- xml_text(xml_find_first(record, ".//NAME"))
gnames = c(gnames, gname)
}
data.gname = data.high %>%
mutate(GENE = gnames) %>%
select(CHR, BP, SNP, A1, A2, N, P = P.R., OR = OR.R., GENE)
}
data.gname
get.gname(a)
a
View(a)
data.gname = get.gname(a)
View(data.gname)
